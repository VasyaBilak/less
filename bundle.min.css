.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
#advantage {
  background-color: #f3f0e7;
  padding: 40px 40px 60px;
  text-align: center;
}
#advantage h1 {
  font-size: 40px;
  margin-bottom: 35px;
  letter-spacing: 2px;
}
#advantage .row {
  display: flex;
  justify-content: space-around;
  margin-bottom: 60px;
}
#advantage .row .col {
  padding: 10px;
}
#advantage .row .col img {
  margin-bottom: 20px;
}
#advantage .row .col h3 {
  margin-bottom: 20px;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
.btn {
  padding: 15px 20px;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  text-transform: uppercase;
  outline: none;
  font-size: 20px;
  transition: 0.1s all;
}
.btn:active {
  box-shadow: inset 0 0 20px -3px rgba(0, 0, 0, 0.6);
}
.btn-line {
  border: 1px solid #000;
  color: #000;
  background: transparent;
}
.btn-red {
  background-color: #e11a27;
  color: #fff;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
#features {
  padding: 40px 0 60px;
  text-align: center;
}
#features img {
  margin-bottom: 20px;
}
#features .text {
  display: flex;
  justify-content: space-around;
  margin: 0 auto;
  width: 950px;
}
#features .text > div {
  width: 25%;
  font-weight: bold;
  font-size: 20px;
}
#features .text > div > div {
  position: relative;
}
#features .text > div.first > div {
  right: 45px;
}
#features .text > div.second > div {
  right: 14px;
}
#features .text > div.third > div {
  left: 20px;
}
#features .text > div.fourth > div {
  left: 54px;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
#header {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  padding-top: 40px;
  background: url('img/header_bg.jpg') no-repeat;
  background-size: cover;
  height: 547px;
}
#header .text {
  text-align: center;
  margin-bottom: 60px;
}
#header .text * {
  font-weight: normal;
}
#header .text h1 {
  font-size: 60px;
  margin-bottom: 20px;
}
#header .text h4 {
  font-size: 30px;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxP.ttf) format('truetype');
}
html,
body {
  padding: 0;
  margin: 0;
  width: 100%;
  font-family: 'Roboto', sans-serif;
  color: #000;
}
h1,
h2,
h3,
h4,
h5,
h6,
p {
  padding: 0;
  margin: 0;
}
a {
  text-decoration: none;
}
.view-port {
  width: 1000px;
  margin: 0 auto;
}
.wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  overflow: hidden;
  background-color: #fff;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}
#nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 80px;
}
#nav .left i {
  position: relative;
  top: 2px;
  margin-right: 20px;
  font-size: 25px;
  cursor: pointer;
}
#nav .left span {
  font-size: 20px;
  font-weight: bold;
}
#nav .right {
  display: flex;
}
#nav .right .phone {
  margin-right: 25px;
  padding: 5px 15px;
  text-align: center;
  border-radius: 10px;
  background-color: #ffd200;
}
#nav .right .phone span {
  font-size: 14px;
  border-bottom: 1px dotted #000;
}
#nav .right i {
  font-size: 25px;
  cursor: pointer;
}

.clean {
  padding: 0;
  margin: 0;
}
.clean-list {
  padding: 0;
  margin: 0;
  list-style: none;
}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
